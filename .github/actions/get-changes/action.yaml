name: "Analyze state changes"
description: "Gets changes to states and sets configuration outputs"
inputs:
  states_dir:
    description: "states directory name"
    required: false
    default: "states"
  config_file:
    description: "folder config file name"
    required: false
    default: ".config.yaml"

outputs:
  folder_name:
    description: "yc_folder_name"
    value: ${{ steps.yc-config.outputs.folder_name }}
  owner:
    description: "yc_owner"
    value: ${{ steps.yc-config.outputs.owner }}
  github_user:
    description: "owner github username"
    value: "${{ steps.yc-config.outputs.github_user }}"
  expires_at:
    description: "yc_expires_at"
    value: ${{ steps.yc-config.outputs.expires_at }}
  terraform_operation:
    description: "apply|destroy"
    value: "${{ steps.yc-config.outputs.terraform_operation }}"

runs:
  using: "composite"
  steps:
    - name: Install yq
      shell: bash
      run: |
        sudo apt update && sudo apt install -y wget
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod a+x /usr/local/bin/yq

    - name: Get state directories
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: ${{ inputs.states_dir }}
        dir_names: true
        dir_names_max_depth: 2

    - id: yc-config
      shell: bash
      run: |
        set -ex 
        changed_dirs=(${{ steps.changed-files.outputs.all_changed_files }})
        
        if [ ${#changed_dirs[@]} -eq 0 ]; then
          echo "No state changes found"
          exit 0
        else 
          # debug
          for dir in ${changed_dirs[@]}; do
            echo "$(basename $dir) changed"
          done
  
          if [ ${#changed_dirs[@]} -gt 1 ]; then
            echo "⛔️Only one state change per branch is supported, split your code changes."
            exit 1
          fi
  
          state_dir=${changed_dirs[0]}
  
          config_file="$state_dir/${{ inputs.config_file }}"
  
          if [ ! -f $config_file ] ; then
            echo "⛔ config file not found - $config_file️"
            exit 1
          fi 
  
          owner=$(yq '.owner' $config_file)
          ttl=$(yq '.ttl' $config_file)
          destroy=$(yq '.destroy' $config_file)
          expires_at=$(date -d "+$ttl" '+%s')
          terraform_operation="apply"
          github_user=$(yq '.github_user' $config_file)
          
          if [ $destroy != "null" ]; then
            terraform_operation="destroy"
          fi
        
          validation_passed=true
          if [ -z "$github_user" ] ; then
            echo "⛔ Github user not set"
            validation_passed=false
          fi 
        
          if [ -z "$owner" ] ; then
            echo "⛔ Owner not set"
            validation_passed=false
          fi 
        
          if [ -z "$ttl" ] ; then
            echo "⛔ TTL not set"
            validation_passed=false
          fi 
           
          test "$validation_passed" == "true" || exit 1
        
          echo "folder_name=$(basename $state_dir)" >> $GITHUB_OUTPUT
          echo "owner=$(echo $owner | tr '[:upper:]' '[:lower:]' | tr " " "_")" >> $GITHUB_OUTPUT
          echo "github_user=$github_user" >> $GITHUB_OUTPUT
          echo "expires_at=$expires_at" >> $GITHUB_OUTPUT
          echo "terraform_operation=$terraform_operation" >> $GITHUB_OUTPUT
        
        fi
