name: "Run terraform"
description: ""
inputs:
  directory:
    description: "path to directory"
    required: true
  sa_key:
    description: "service account key"
    required: true
  version:
    description: "image version"
    required: false
    default: "1.3.6"
  operation:
    description: "apply or destroy"
    default: "apply"
  apply_changes:
    description: "apply changes after plan"
    default: "false"
  container_opts:
    description: "container run options"
    required: false
    default: "--volume $(pwd):/workdir --workdir /workdir/${DIRECTORY} --entrypoint="
  env:
    description: "container environment"
    required: false
    default: "--env TF_INPUT=false --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env GITHUB_TOKEN"
  state_access_key:
    description: "will be used in AWS_ACCESS_KEY_ID"
    required: true
  state_secret_access_key:
    description: "will be used in AWS_SECRET_ACCESS_KEY"
    required: true
  github_token:
    description: "for repo configuration"
    required: true

runs:
  using: "composite"
  steps:

    - name: Put key
      shell: bash
      env:
        KEY: ${{ inputs.sa_key }}
        DIRECTORY: ${{ inputs.directory }}
      run: |
        set -ex
        cd $DIRECTORY
        cat > sa_key.json <<EOF
        $KEY
        EOF
        
    - name: Terraform plan
      shell: bash
      env:
        # don't forget to update inputs.env
        DIRECTORY: ${{ inputs.directory }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        AWS_ACCESS_KEY_ID: ${{ inputs.state_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.state_secret_access_key }}
      run: |
        docker run --rm \
          ${{ inputs.env }} \
          ${{ inputs.container_opts }} \
          hashicorp/terraform:${{ inputs.version }}  \
            sh -c '
            set -ex
            terraform init
            terraform plan ${{ inputs.operation == 'destroy' && '-destroy' || ''  }} -out=plan.out
            if [ "${{ inputs.apply_changes }}" == 'true' ]; then
              terraform apply plan.out
            fi
            '
