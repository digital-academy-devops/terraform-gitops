name: Run terraform
on:
  push:
    branches:
      - *

jobs:
  get-changes:
    runs-on: ubuntu-latest
    outputs:
      folder_name: ${{ steps.get-changes.outputs.folder_name }}
      owner: ${{ steps.get-changes.outputs.owner }}
      expires_at: ${{ steps.get-changes.outputs.expires_at }}
    steps:
      - name: clean workspace
        uses: jstone28/runner-workspace-cleaner@v1.0.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ./.github/actions/get-changes
        id: get-changes

  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VERSION: 1.3.6
    needs:
      - get-changes
    if: ${{ needs.get-changes.outputs.folder_name }} 
    steps:
      - name: clean workspace
        uses: jstone28/runner-workspace-cleaner@v1.0.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ./.github/actions/configure-yc-cli
        with:
          token: ${{ secrets.YC_TOKEN }}
          cloud_id: ${{ secrets.YC_CLOUD }}

      - name: Configure folder
        uses: ./.github/actions/create-yc-folder
        with:
          name: ${{ needs.get-changes.outputs.folder_name }}
          owner: ${{ needs.get-changes.outputs.owner }}
          expires_at: ${{ needs.get-changes.outputs.expires_at }}

      - name: Set terraform environment
        shell: bash
        run: |
          YC_FOLDER_ID=$(yc resource-manager folder get --name ${{ needs.get-changes.outputs.folder_name }} --format yaml | yq '.id')
          YC_TOKEN=$(yc iam create-token)
          YC_CLOUD_ID=$(yc config get cloud-id)
          echo "::add-mask::$YC_FOLDER_ID" 
          echo "::add-mask::$YC_TOKEN" 
          echo "::add-mask::$YC_CLOUD_ID" 
          
          echo "YC_FOLDER_ID=$YC_FOLDER_ID" >> $GITHUB_ENV 
          echo "YC_TOKEN=$YC_TOKEN" >> $GITHUB_ENV
          echo "YC_CLOUD_ID=$YC_CLOUD_ID" >> $GITHUB_ENV
          
          echo "AWS_ACCESS_KEY_ID=${{ secrets.YC_ACCESS_KEY_ID }}" >> $GITHUB_ENV 
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.YC_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV 
          
          echo "TF_INPUT=false" >> $GITHUB_ENV
          echo "STATE_DIR=states/${{ needs.get-changes.outputs.folder_name }}" >> $GITHUB_ENV
          
          echo "STATE_DIR=states/${{ needs.get-changes.outputs.folder_name }}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${{ needs.get-changes.outputs.folder_name }}" >> $GITHUB_ENV
          
          echo "TF_ENV=--env YC_TOKEN --env YC_CLOUD_ID --env YC_FOLDER_ID --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          
          echo "TF_CONTAINER_OPTS=--volume $(pwd):/workdir --workdir /workdir/$STATE_DIR --entrypoint=""' >> $GITHUB_ENV
          
          tf_plan_opts=""
          if [ "${{ needs.get-changes.outputs.terraform_operation }}" == "destroy" ]; then
            tf_plan_opts="$tf_plan_opts -destroy"
          fi
          
          echo "TF_PLAN_OPTS=$tf_plan_opts" >> $GITHUB_ENV

      - name: Terraform plan
        shell: bash
        run: |
          set -e
          docker run --rm \
            ${TF_ENV} \
            ${TF_CONTAINER_OPTS} \
            hashicorp/terraform:${{ env.TF_VERSION }}  \
              sh -c 'terraform init
              terraform plan ${TF_PLAN_OPTS} -out=plan.out
              '

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -e
          docker run --rm \
            ${TF_ENV} \
            ${TF_CONTAINER_OPTS} \
            hashicorp/terraform:${{ env.TF_VERSION }}  \
              sh -c 'terraform apply plan.out'
      
          
