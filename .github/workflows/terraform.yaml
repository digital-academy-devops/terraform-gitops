name: Apply tf changes
on:
  workflow_dispatch: {}
  push:
    branches:
    - '*'
    paths:
    - 'states/**'

jobs:
  get-changes:
    runs-on: ubuntu-latest
    outputs:
      folder_name: ${{ steps.get-changes.outputs.folder_name }}
      owner: ${{ steps.get-changes.outputs.owner }}
      expires_at: ${{ steps.get-changes.outputs.expires_at }}
    steps:
      - name: clean workspace
        uses: jstone28/runner-workspace-cleaner@v1.0.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ./.github/actions/get-changes
        id: get-changes

  terraform:
    runs-on: ubuntu-latest
    needs:
      - get-changes
    steps:
      - name: clean workspace
        uses: jstone28/runner-workspace-cleaner@v1.0.0

      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ./.github/actions/configure-yc-cli
        with:
          token: ${{ secrets.YC_TOKEN }}
          cloud_id: ${{ secrets.YC_CLOUD }}

      - name: Configure folder
        uses: ./.github/actions/create-yc-folder
        with:
          name: ${{ needs.get-changes.outputs.folder_name }}
          owner: ${{ needs.get-changes.outputs.owner }}
          expires_at: ${{ needs.get-changes.outputs.expires_at }}

      - name: Set terraform environment
        shell: bash
        run: |
          echo "::add-mask::YC_FOLDER_ID" 
          echo "::add-mask::YC_TOKEN" 
          echo "::add-mask::YC_CLOUD_ID" 
          echo "YC_FOLDER_ID=$(yc resource-manager folder get --name ${{ needs.get-changes.outputs.folder_name }} --format yaml | yq '.id')" >> $GITHUB_ENV 
          echo "YC_TOKEN=$(yc iam create-token)" >> $GITHUB_ENV
          echo "YC_CLOUD_ID=$(yc config get cloud-id)" >> $GITHUB_ENV
          echo "TF_INPUT=false" >> $GITHUB_ENV
          echo "STATE_DIR=states/${{ needs.get-changes.outputs.folder_name }}" >> $GITHUB_ENV

      - name: Terraform plan
        env:
          STATE_DIR: states/${{ needs.get-changes.outputs.folder_name }}
          FOLDER_NAME: ${{ needs.get-changes.outputs.folder_name }}
        shell: bash
        run: |
          set -e
          docker run --rm \
            --env YC_TOKEN \
            --env YC_CLOUD_ID \
            --env YC_FOLDER_ID \
            --env AWS_ACCESS_KEY_ID=${{ secrets.YC_STATE_ACCESS_KEY }} \
            --env AWS_SECRET_ACCESS_KEY=${{ secrets.YC_STATE_ACCESS_SECRET }} \
            --volume $(pwd):/workdir \
            --workdir /workdir/$STATE_DIR \
            --entrypoint="" \
            hashicorp/terraform:1.3.6  \
              sh -c 'terraform init
              terraform plan -out=plan.out
              '
        
      - name: Terraform apply
        shell: bash
        if: github.ref == 'refs/heads/main'
        run: |
          set -e
          docker run --rm \
            --env YC_TOKEN \
            --env YC_CLOUD_ID \
            --env YC_FOLDER_ID \
            --env AWS_ACCESS_KEY_ID=${{ secrets.YC_STATE_ACCESS_KEY }} \
            --env AWS_SECRET_ACCESS_KEY=${{ secrets.YC_STATE_ACCESS_SECRET }} \
            --volume $(pwd):/workdir \
            --workdir /workdir/$STATE_DIR \
            --entrypoint="" \
            hashicorp/terraform:1.3.6  \
              sh -c 'terraform apply plan.out'

          
